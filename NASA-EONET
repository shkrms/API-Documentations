Das Vorgehen folgt dem Youtube-Video-Tutorial "Python API Tutorial (Deutsch) | ğŸš€ FÃ¼r AnfÃ¤ngerinnen und AnfÃ¤nger | NASA-API" 
unter der Adresse "https://www.youtube.com/watch?v=fOPWZytYsFM" (04.10.2023)
auf Youtube hochgeladen am 21.05.2021 vom Account "Programmieren lernen mit Chris ğŸš€" -> Account-Adresse "https://www.youtube.com/@Programmieren"
------------------------------------------------------------------------------------------------------------------------------------------------------
Programmieren in Visual Studio Code:

Erstelle ein neues Python-File
->bspw. "nasa.py"
Installiere via Terminal das Python-Modul "requests" 
->pip3 install requests
Importiere das Modul "requests" im Python-Script
->import requests
Importiere das Modul "json" im Python-Script
->import json
(Teste auf Fehler im Script-> Run Python File)

Stelle Anfrage an den NASA-Server:
Halte Einsicht in die API-Dokumentation des NASA-Servers zu EONET
->https://api.nasa.gov/ ->https://eonet.gsfc.nasa.gov/docs/v2.1

Halte RÃ¼ckblick auf Beispiel-Anfragen mit Beispiel-Parametern
->bspw. Example: https://eonet.gsfc.nasa.gov/api/v2.1/events?limit=5&days=20&source=InciWeb&status=open

Ãœbernehme Parameter fÃ¼r Python-Script und beschrÃ¤nke die Ausgabe nach eigenem Interesse (Mengenwert)
->bspw. limit = 500
        days  = 365

Ãœbernehme Beispiel-Anfrage als Anfrage fÃ¼r Python-Script als Variable url und eliminiere unnÃ¶tige Angaben (->&source=InciWeb&status=open)
->bspw. url = "https://eonet.gsfc.nasa.gov/api/v2.1/events?limit=5&days=20"

Formatiere die Anfrage fÃ¼r gesuchte Parameter (bspw. limit = 500, days = 365) ->Formatiere den String der Anfrage mit einem f-> Ersetze Werte mit {gesuchter parameter}
->bspw. url = f"https://eonet.gsfc.nasa.gov/api/v2.1/events?limit={limit}&days={days}"
(Teste auf Fehler im Script-> Run Python File)

Erstelle die Anfrage an den NASA-Server im Python-Script als Variable r
r = requests.get(url)

Definiere Ergebnis als lesbares json-Format als Variable events_data
events_data = r.json()

Speichere Ergebnis in eigener Datei 
1. Zeile -> Ã¶ffne neue Datei (with open)-> gib Datei einen Namen ('events.json') -> gib Recht fÃ¼r Schreiben/Write ('w') -> Ã¶ffne Datei unter Namen (f)
2. Zeile -> Greif auf Datei zu und befehle Schreiben/Write (f.write) -> Greif auf Json-Modul zu und befehle dumps fÃ¼r ablegen in Datei (json.dumps) ->Definiere Daten fÃ¼r dumps; welche Daten? (events_data); rÃ¼cke Daten auf bspw. 4 ein (indent = 4)
->bspw. with open('events.json','w') as f:
             f.write(json.dumps(events_data, indent = 4))
Run Python File -> Neue Datei wird erstellt mit Ergebnissen

Gebe in Python-Script Liste aus Objektbereich als Variable events_list aus identifizierten Bereichen in JSON-Datei (bspw.'events')
->bspw. events_list = events_data['events']

Gebe einzelne Objekte aus (bspw. Events nach 'title') 
1. Zeile-> fÃ¼r alle Events (for event) -> in Liste (in events_list)
2. Zeile-> mache Ausgabe (print(event['title'])) 
->bspw. for event in events_list:
            print(event['title'])

Run Python File

------------------------------------------------------------------------------------------------------------------------------------------------------

VollstÃ¤ndiges Python-Script:

import requests
import json

limit = 500
days = 365

url = f"https://eonet.gsfc.nasa.gov/api/v2.1/events?limit={limit}&days={days}"
r = requests.get(url)
events_data = r.json()

with open('events.json','w') as f:
     f.write(json.dumps(events_data, indent=4))
    
events_list = events_data['events']

for event in events_list:
    print(event['title'])


